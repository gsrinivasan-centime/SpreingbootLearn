services:
  # Database Services
  mysql:
    image: mysql:8.0
    container_name: bookstore-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: bookstore_books
      MYSQL_USER: user_user
      MYSQL_PASSWORD: user_password
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "bookstore_user", "-pbookstore_pass"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s
    networks:
      - bookstore-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bookstore-redis
    command: redis-server --requirepass redis_password --maxmemory 256m --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      timeout: 10s
      retries: 5
      interval: 5s
      start_period: 10s
    networks:
      - bookstore-network

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: bookstore-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    networks:
      - bookstore-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: bookstore-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 30s
    networks:
      - bookstore-network

  # Microservices
  book-service:
    build:
      context: ./book-service
      dockerfile: Dockerfile
      args:
        - MAVEN_OPTS=-Xmx1024m
    image: bookstore/book-service:latest
    container_name: bookstore-book-service
    ports:
      - "8081:8081"
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8081
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/bookstore_books?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: bookstore_user
      SPRING_DATASOURCE_PASSWORD: bookstore_pass
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
      
      # Liquibase Configuration
      SPRING_LIQUIBASE_ENABLED: true
      SPRING_LIQUIBASE_CHANGE_LOG: classpath:db/changelog/db.changelog-master.xml
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_USERNAME: default
      SPRING_REDIS_PASSWORD: redis_password
      SPRING_REDIS_TIMEOUT: 2000ms
      
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_KAFKA_CONSUMER_GROUP_ID: book-service-group
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonDeserializer
      
      # Management & Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_HEALTH_READINESS_STATE_ENABLED: true
      MANAGEMENT_HEALTH_LIVENESS_STATE_ENABLED: true
      
      # JVM Configuration
      JAVA_OPTS: -Xmx512m -Xms256m -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/actuator/health/readiness"]
      timeout: 10s
      retries: 10
      interval: 15s
      start_period: 90s
    restart: unless-stopped
    networks:
      - bookstore-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      args:
        - MAVEN_OPTS=-Xmx1024m
    image: bookstore/user-service:latest
    container_name: bookstore-user-service
    ports:
      - "8082:8082"
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8082
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/bookstore_users?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: bookstore_user
      SPRING_DATASOURCE_PASSWORD: bookstore_pass
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
      
      # Liquibase Configuration
      SPRING_LIQUIBASE_ENABLED: true
      SPRING_LIQUIBASE_CHANGE_LOG: classpath:db/changelog/db.changelog-master.xml
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_USERNAME: default
      SPRING_REDIS_PASSWORD: redis_password
      SPRING_REDIS_TIMEOUT: 2000ms
      
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_KAFKA_CONSUMER_GROUP_ID: user-service-group
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonDeserializer
      
      # Management & Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_HEALTH_READINESS_STATE_ENABLED: true
      MANAGEMENT_HEALTH_LIVENESS_STATE_ENABLED: true
      
      # JVM Configuration
      JAVA_OPTS: -Xmx512m -Xms256m -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/v1/actuator/health/readiness"]
      timeout: 10s
      retries: 10
      interval: 15s
      start_period: 90s
    restart: unless-stopped
    networks:
      - bookstore-network

  # Management Tools
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bookstore-redis-commander
    ports:
      - "8090:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped
    networks:
      - bookstore-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: bookstore-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      AUTH_TYPE: LOGIN_FORM
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: admin123
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    restart: unless-stopped
    networks:
      - bookstore-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  bookstore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
