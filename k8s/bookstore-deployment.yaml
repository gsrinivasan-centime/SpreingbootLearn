apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookstore-microservices
  labels:
    app: bookstore
spec:
  replicas: 2
  selector:
    matchLabels:
      app: bookstore
  template:
    metadata:
      labels:
        app: bookstore
    spec:
      containers:
      # Book Service Container
      - name: book-service
        image: bookstore/book-service:latest
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mysql://mysql-service:3306/bookstore_books"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: db-username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: db-password
        - name: SPRING_REDIS_HOST
          value: "redis-service"
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: USER_SERVICE_URL
          value: "http://localhost:8082"  # Same pod communication
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/actuator/health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/actuator/ready
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
      
      # User Service Container
      - name: user-service
        image: bookstore/user-service:latest
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mysql://mysql-service:3306/bookstore_users"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: db-username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: db-password
        - name: SPRING_REDIS_HOST
          value: "redis-service"
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: BOOK_SERVICE_URL
          value: "http://localhost:8081"  # Same pod communication
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/actuator/health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/actuator/ready
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: bookstore-service
  labels:
    app: bookstore
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: book-service
  - port: 8082
    targetPort: 8082
    protocol: TCP
    name: user-service
  selector:
    app: bookstore

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bookstore-config
data:
  application-kubernetes.yml: |
    spring:
      jpa:
        hibernate:
          ddl-auto: validate
        show-sql: false
      liquibase:
        change-log: classpath:db/changelog/db.changelog-master.xml
      redis:
        port: 6379
        timeout: 2000ms
        lettuce:
          pool:
            max-active: 8
            max-idle: 8
            min-idle: 0
      kafka:
        producer:
          retries: 3
          batch-size: 16384
          buffer-memory: 33554432
        consumer:
          group-id: bookstore-group
          auto-offset-reset: earliest
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: always
    
    logging:
      level:
        com.bookstore: INFO
        org.springframework.web: INFO
      pattern:
        console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

---
apiVersion: v1
kind: Secret
metadata:
  name: bookstore-secrets
type: Opaque
data:
  db-username: Ym9va3N0b3JlX3VzZXI=  # bookstore_user (base64)
  db-password: Ym9va3N0b3JlX3Bhc3M=  # bookstore_pass (base64)
